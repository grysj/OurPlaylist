// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: playlists.sql

package db

import (
	"context"
)

const createPlaylist = `-- name: CreatePlaylist :one
INSERT INTO playlists (user_id, link, description) VALUES ($1, $2, $3)
RETURNING id, user_id, created_at, link, like_count, description
`

type CreatePlaylistParams struct {
	UserID      int32  `json:"user_id"`
	Link        string `json:"link"`
	Description string `json:"description"`
}

func (q *Queries) CreatePlaylist(ctx context.Context, arg CreatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, createPlaylist, arg.UserID, arg.Link, arg.Description)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.Link,
		&i.LikeCount,
		&i.Description,
	)
	return i, err
}

const deletePlaylist = `-- name: DeletePlaylist :exec
DELETE FROM playlists WHERE id = $1
`

func (q *Queries) DeletePlaylist(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePlaylist, id)
	return err
}

const getPlaylistsByUserID = `-- name: GetPlaylistsByUserID :many
SELECT id, user_id, created_at, link, like_count, description FROM playlists WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetPlaylistsByUserID(ctx context.Context, userID int32) ([]Playlist, error) {
	rows, err := q.db.QueryContext(ctx, getPlaylistsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Playlist{}
	for rows.Next() {
		var i Playlist
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.Link,
			&i.LikeCount,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const likePlaylist = `-- name: LikePlaylist :one
UPDATE playlists
SET like_count = like_count + 1
WHERE id = $1
RETURNING id, user_id, created_at, link, like_count, description
`

func (q *Queries) LikePlaylist(ctx context.Context, id int32) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, likePlaylist, id)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.Link,
		&i.LikeCount,
		&i.Description,
	)
	return i, err
}

const unlikePlaylist = `-- name: UnlikePlaylist :one
UPDATE playlists
SET like_count = like_count - 1
WHERE id = $1
RETURNING id, user_id, created_at, link, like_count, description
`

func (q *Queries) UnlikePlaylist(ctx context.Context, id int32) (Playlist, error) {
	row := q.db.QueryRowContext(ctx, unlikePlaylist, id)
	var i Playlist
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.Link,
		&i.LikeCount,
		&i.Description,
	)
	return i, err
}
